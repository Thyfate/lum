#version 450 core

precision highp int;
precision highp float;

//TODO: move per-workgroup computations to different shader
//TODO: AND test shared perfomance
layout(push_constant) uniform constants{
    mat4 trans; //to map modelVoxels to game voxel world
    int starting_block; //where do we start in palette
} PushConstants;

layout(set = 0, binding = 0, r8ui)  readonly uniform uimage3D modelVoxels;
//blocks and blockPalettes are copies 
layout(set = 0, binding = 1, r8ui)           uniform uimage3D blocks;
layout(set = 0, binding = 2, r8ui) writeonly uniform uimage3D blockPalette;

//TODO: balance, X>Y>Z for coherence
layout(local_size_x = 8, local_size_y = 8) in;

void main(void){
     vec3  relative_vox = gl_GlobalInvocationID.xyz;
    ivec3 irelative_vox = ivec3(relative_vox);
    //part where actual transformation happens
    ivec3   target_vox = ivec3((PushConstants.trans * vec4(relative_vox,1)).xyz);
    ivec3 relative_block_in_model = irelative_vox / 16;
    ivec3 target_block_in_world = target_vox   /  16;

    ivec3 model_size = imageSize(modelVoxels);
    //+1 for propper rounding, so 15 results into 1
    ivec3 model_size_in_blocks = (model_size + ivec3(1)) / 16;
    //if this is extra "out-of-bounds" voxel
    if (any(greaterThanEqual(irelative_vox, model_size))) return;

    //let it have X->Y->Z order for blocks in palette
    //so we have target voxel position, initial one and target block position in the world
    //what we have to do is find ID of final block in palette (that this voxel will belong to)
    //then we load voxel from its initial position
    //then we load it to target block in palette
    //then we set target block in world to block in palette ID
    //TODO: test different approaches to cast and dot etc...
    ivec3 rb = relative_block_in_model;
    ivec3 MS = model_size_in_blocks;
    //WHERE IS MY IDOT
    int target_block_in_palette = (
        rb.x            +
        rb.y *MS.x      +
        rb.z *MS.x*MS.y +
        PushConstants.starting_block
    );

    //relative to palette block it will be written to
    ivec3 realtive_target_palette_voxel = target_vox % 16;
    ivec3          target_palette_voxel = realtive_target_palette_voxel + ivec3(0,0,16)*target_block_in_palette;
    
    int voxel = int(imageLoad(modelVoxels, irelative_vox).r);
    //TODO: test ivec(val,0,0,0)
    imageStore(blockPalette, target_palette_voxel, ivec4(voxel));
    imageStore(blocks, target_block_in_world, ivec4(target_block_in_palette));
}