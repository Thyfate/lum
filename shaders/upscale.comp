#version 450

precision highp float;
precision highp int;

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

layout(set = 0, binding = 0, rgba8_snorm) uniform image2D   lowres_matNorm;
layout(set = 0, binding = 1, rgba8_snorm) uniform image2D  highres_matNorm;
layout(set = 0, binding = 2, rgba16) uniform image2D  denoised_frame; //in
layout(set = 0, binding = 3, rgba16) uniform image2D  upscaled_frame; //out

ivec2 size;
vec2 ratio;

vec3 load_lowres_norm(ivec2 pixel){
    vec3 norm = (imageLoad(lowres_matNorm, pixel).gba);
    return norm;
}
vec3 load_highres_norm(ivec2 pixel){
    vec3 norm = (imageLoad(highres_matNorm, pixel).gba);
    return norm;
}
int load_lowres_mat(ivec2 pixel){
    int mat = int(round(imageLoad(lowres_matNorm, pixel).x*127.0))+127;
    return mat;
}
int load_highres_mat(ivec2 pixel){
    int mat = int(round(imageLoad(highres_matNorm, pixel).x*127.0))+127;
    return mat;
}
// float load_depth(ivec2 pixel){
//     // ivec2 size = imageSize(Gbuffer);
//     // if(any(greaterThanEqual(pixel, size)) || any(lessThan(pixel, ivec2(0)))) return 100000000000000.0;
    
//     float depth_encoded = imageLoad(depth, pixel).x;
//     return -(depth_encoded-0.5)*200.0;
// }

/*
so we have lowres denoised frame and highres gBuffer with material and normal info
for each high res pixel we:
calculate how many highres pixels touch lowres pixel (round ratio up)
    *typically it would be 2x2 pixels
we run this shader for every highres pixel
algorithm:
    find lowres pixels that touch highres one
    if their material (from lowres gBuffer) (and normal but can be skipped for perfomance reasons) is the same (as highres pixel's mat from highres gBuffer) than take them in count
*/
// float calculate_weight(
//     vec3 color, vec3 color_center,
//     vec3 normal, vec3 normal_center,
//     int mat, int mat_center,
//     float depth, float depth_center,
//     float _phiDepth
// ){
//     float weight;

//     float phiNormal, phiDepth, phiIllum;
//     phiNormal = 128.0;
//     // phiDepth = _phiDepth;
//     phiDepth = 10.0;
//     phiIllum = .3;
    
//     const float weightNormal = pow(clamp(dot(normal_center, normal), 0, 1), phiNormal);
//     const float weightZ = (phiDepth == 0) ? 0.0f : abs(depth_center - depth) / phiDepth;
//     const float weightLillum = abs(luminance(color_center) - luminance(color)) / phiIllum;
//     const float weigth_mat = (mat == mat_center) ? 1 : 0;

//     weight = exp(0.0 - max(weightLillum, 0.0) - max(weightZ, 0.0)) * weightNormal * weigth_mat;

//     return weight;
// }
uint hash3(uint x, uint y, uint z) {
    x += x >> 11;
    x ^= x << 7;
    x += y;
    x ^= x << 3;
    x += z ^ (x >> 14);
    x ^= x << 6;
    x += x >> 15;
    x ^= x << 5;
    x += x >> 12;
    x ^= x << 9;
    return x;
}

float random(vec3 f) {
  uint mantissaMask = 0x007FFFFFu;
  uint one = 0x3F800000u;
  uvec3 u = floatBitsToUint(f);
  uint h = hash3(u.x, u.y, u.z);
  return uintBitsToFloat((h & mantissaMask) | one) - 1.0;
}

int counter = 0;
float RandomNoise(ivec2 coords){
  uint mantissaMask = 0x007FFFFFu;
  uint one = 0x3F800000u;
  uvec3 u = ivec3(coords.x*coords.y, coords.y, counter++);
  uint h = hash3(u.y, u.x, u.z);
  float res = uintBitsToFloat((h & mantissaMask) | one) - 1.0;

//   randvec.x = sin(randvec.y);
//   randvec.y = sin(randvec.z);
//   randvec.z = sin(res);
  
  return (res);
}

int decode_mat(in float fmat) {
    return int(round(fmat*127.0))+127;
}
#define UPSCALE_RATE 2
//TODO Specialization constants

layout(local_size_x=8, local_size_y=8) in;
void main(){
    ivec2 highres_pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2  lowres_size = imageSize( lowres_matNorm);
    ivec2 highres_size = imageSize(highres_matNorm);

    // ivec2 lowres_ll_pix = ivec2((vec2(pix) / vec2(highres_size)) * vec2(lowres_size));
    // ivec2 lowres_ll_pix = ((pix)*lowres_size) / highres_size;
    // lowres_ll_pix = pix;
    int highres_mat = decode_mat(imageLoad(highres_matNorm, highres_pix).x);
    vec3 highres_normal = ((imageLoad(highres_matNorm, highres_pix).yzw));
    vec3 color = vec3(0);
    float weight = 0;

    // for(int xx=0; xx<UPSCALE_RATE; xx++){
    // for(int yy=0; yy<UPSCALE_RATE; yy++){
    //     ivec2 lowres_pix = ((highres_pix + ivec2(xx,yy))*lowres_size) / highres_size;
    //     int lowres_mat = decode_mat(imageLoad(lowres_matNorm, lowres_pix).x);
    //     vec3 lowres_color = imageLoad(denoised_frame, lowres_pix).rgb;
    //     float lowres_weight = float(lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, ll_lowres_pix).w - highres_depth)/2000); //);
    //     lowres_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, lowres_pix).yzw))), 0, 1), 1);
    //     lowres_weight += 0.0001;

    //     color  += lowres_weight * lowres_color;
    //     weight += lowres_weight;
    // }}

    ivec2 ll_lowres_pix = ((highres_pix + ivec2(0,0))*lowres_size) / highres_size;
    ivec2 lh_lowres_pix = ((highres_pix + ivec2(0,1))*lowres_size) / highres_size;
    ivec2 hl_lowres_pix = ((highres_pix + ivec2(1,0))*lowres_size) / highres_size;
    ivec2 hh_lowres_pix = ((highres_pix + ivec2(1,1))*lowres_size) / highres_size;

    // float highres_depth =(imageLoad(highres_Gbuffer, pix).w);
    // imagelo

    int ll_lowres_mat = decode_mat(imageLoad(lowres_matNorm, ll_lowres_pix).x);
    int lh_lowres_mat = decode_mat(imageLoad(lowres_matNorm, lh_lowres_pix).x);
    int hl_lowres_mat = decode_mat(imageLoad(lowres_matNorm, hl_lowres_pix).x);
    int hh_lowres_mat = decode_mat(imageLoad(lowres_matNorm, hh_lowres_pix).x);


    
    // float ll_dist = distance((vec2(pix)+.5), (vec2(ll_lowres_pix)+.5));
    // float lh_dist = distance((vec2(pix)+.5), (vec2(lh_lowres_pix)+.5));
    // float hl_dist = distance((vec2(pix)+.5), (vec2(hl_lowres_pix)+.5));
    // float hh_dist = distance((vec2(pix)+.5), (vec2(hh_lowres_pix)+.5));

    // float coverage = 
    // float lh_dist = 
    // float hl_dist = 
    // float hh_dist = 

    float ll_weight = float(ll_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, ll_lowres_pix).w - highres_depth)/2000); //);
    float lh_weight = float(lh_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, lh_lowres_pix).w - highres_depth)/2000); //);
    float hl_weight = float(hl_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, hl_lowres_pix).w - highres_depth)/2000); //);
    float hh_weight = float(hh_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, hh_lowres_pix).w - highres_depth)/2000); //);

    ll_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, ll_lowres_pix).yzw))), 0, 1), 1);
    lh_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, lh_lowres_pix).yzw))), 0, 1), 1);
    hl_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, hl_lowres_pix).yzw))), 0, 1), 1);
    hh_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, hh_lowres_pix).yzw))), 0, 1), 1);

    // ivec2 local_pix = ivec2(gl_LocalInvocationID.xy);
    // ivec2 pixel_to_load_from = local_pix+1;
    
    // uint this_id = local_pix.y*8 + local_pix.x;
    // uint   hh_id = pixel_to_load_from.y*8 + pixel_to_load_from.x;
    // hh_id gl_SubgroupInvocationID+9;

    vec3 ll_lowres_color = imageLoad(denoised_frame, ll_lowres_pix).rgb;
    vec3 lh_lowres_color = imageLoad(denoised_frame, lh_lowres_pix).rgb;
    vec3 hl_lowres_color = imageLoad(denoised_frame, hl_lowres_pix).rgb;
    vec3 hh_lowres_color = imageLoad(denoised_frame, hh_lowres_pix).rgb;

    // vec3 hh_lowres_color = subgroupShuffle(ll_lowres_color, hh_id);

    // ll_weight *= (1 / (ll_dist+1e-8));
    // lh_weight *= (1 / (lh_dist+1e-8));
    // hl_weight *= (1 / (hl_dist+1e-8));
    // hh_weight *= (1 / (hh_dist+1e-8));
    ll_weight += 0.0001; //to prevent weird rounding errors

    color = (
        ll_lowres_color * ll_weight+
        lh_lowres_color * lh_weight+
        hl_lowres_color * hl_weight+
        hh_lowres_color * hh_weight        
    );
     weight = (
        ll_weight+
        lh_weight+
        hl_weight+
        hh_weight   
    );


    vec3 final_color = color / weight;
    // final_color = ll_lowres_color;
    // bool is_trade_legit = any(greaterThanEqual(ivec2(pixel_to_load_from.xy), ivec2(8,4))) || (gl_SubgroupInvocationID >= gl_SubgroupSize-1);

    // bool is_trade_legit = false;
    //     // is_trade_legit = 

    // if(local_pix.y < 4) { //first half
    //      is_trade_legit = local_pix.x < 7;
    //     // is_trade_legit = all(lessThanEqual(ivec2(pixel_to_load_from.xy), ivec2(7,3)));
    // } 
    // //(local_pix.y > 4) && 
    // if((local_pix.y > 4) && (local_pix.y < 7)) {
    //      is_trade_legit = local_pix.x < 7;
    //     // is_trade_legit = all(lessThanEqual(ivec2(pixel_to_load_from.xy), ivec2(7,7)));
    //     // is_trade_legit = any(greaterThanEqual(ivec2(pixel_to_load_from.xy), ivec2(8,8)));
    // }

    // float n = frand()+frand()-1.0;  // triangular noise
    // 1+2!=2;

    // float n = RandomNoise(highres_pix) + RandomNoise(highres_pix) - 1.0;
    // final_color = final_color + n*exp2(-float(3));
    // float color_resolution = 6.0;
    // final_color = floor(final_color * color_resolution) / (color_resolution - 1.0);
    // if(distance(ll_lowres_color, hh_lowres_color)>.1) final_color = vec3(0);
    
    imageStore(upscaled_frame, highres_pix, vec4(final_color,1));
}