#version 450 core

struct CopyOperation {
    int src;
    int dst;
};

layout(set = 0, binding = 0, r8ui) uniform uimage3D blocksPalette;
    //copy_x and copy_y are set to 16 by vk set buffer
layout(set = 0, binding = 1) readonly buffer copyCounterBuffer {
    int copy_x; //16
    int copy_y; //16
    int copy_z_counter;  //16 * copies_count
        // TODO: balance this
        // static "vector" ("dynamic" array of fixed capacity and atomic size_counter). 
        // this stage will copy blocks_to_copy[i] from block palette to blocks_to_copy[STATIC_BLOCKS_COUNT+i] 
    CopyOperation copies[1024];
};

//TODO: balance
//16 by x
//16 by y
//16 * NUMBER OF BLOCKS TO COPY by z
const int STATIC_BLOCKS_COUNT = 12;

ivec3 voxel_in_palette(ivec3 relative_voxel_pos, int block_id) {
    ivec3 absolute_voxel_pos = (
        relative_voxel_pos+
        ivec3(0,0,16)*block_id
    );
    return absolute_voxel_pos;
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(void){
    
    vec3 pos = gl_GlobalInvocationID.xyz;
    ivec3 ipos = ivec3(pos);

    //if out of bound
    //TODO: optimize (probably can be removed if dispatch_size is  multiply of local_size)
    if (any(greaterThanEqual(ipos, ivec3(16,16,copy_z_counter)))) return;

    int copy_op_index = ipos.z / 16;
    CopyOperation copy = copies[copy_op_index];

    ivec3 relative_ipos = ipos % 16;
    ivec3 src_voxel = voxel_in_palette(relative_ipos, copy.src);
    ivec3 dst_voxel = voxel_in_palette(relative_ipos, copy.dst);
    
    imageStore(blocksPalette, dst_voxel,
        imageLoad(blocksPalette, src_voxel)
    );

    return;
}