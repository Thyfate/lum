#version 450 core

precision highp int;
precision highp float;

layout(push_constant) uniform constants{
    int timeSeed;
} PushConstants;
//descriptor bindings for the pipeline
layout(set = 0, binding = 0, rgba32f) readonly uniform image2D posMat;
layout(set = 0, binding = 1, rgba32f) readonly uniform image2D norms;
layout(set = 0, binding = 2, rgba32f) readonly uniform image2D diffs;

layout(set = 0, binding = 3, r32i) uniform iimage3D blocks;

//
layout(set = 0, binding = 4, r8ui) uniform uimage3D blockPalette;

/* <- Width -> 
|rgb a emm rough 
|rgb a emm rough
....
|rgb a emm rough
|rgb a emm rough
*/
layout(set = 0, binding = 5, r32f) readonly uniform image2D voxelPalette;

layout(set = 0, binding = 6, rgba8) uniform   image2D frame;
layout(set = 0, binding = 7       ) uniform sampler2D frame_sampler;

vec3 cameraRayDir = normalize(vec3(1, 0.1, -.2));
// vec3 cameraRayDir = normalize(vec3(-1, 0, .1));
// vec3 cameraRayDir = normalize(vec3(12, 21, 7));
// vec3 cameraRayDir = normalize(vec3(1, 1, 0));
vec3 globalLightDir = normalize(vec3(1, -1, 0));
// vec3 globalLightDir = cameraRayDir;
vec3 cameraRayDirPlane = vec3(cameraRayDir.xy, 0);
vec3 horizline = normalize(cross(cameraRayDirPlane, vec3(0,0,1)));
vec3 vertiline = normalize(cross(cameraRayDir, horizline));
vec3 cameraPos = vec3(-10, -1, 6);

#define MAX_DEPTH 4
#define NUM_SAMPLES 1
#define PI 3.1415926535
#define FAR_DISTANCE 100000.0
#define nIN 1.0
#define nOUT 1.0

#define WIDTH_B  (5)
#define LENGTH_B (5)
#define HEIGHT_B (5)

vec3 randvec;

float view_width;
float view_height;

struct Material{
    vec3 color; //for each color
    float emmitance;
    float smoothness;
    float transparancy;
};

uint hash3(uint x, uint y, uint z) {
    x += x >> 11;
    x ^= x << 7;
    x += y;
    x ^= x << 3;
    x += z ^ (x >> 14);
    x ^= x << 6;
    x += x >> 15;
    x ^= x << 5;
    x += x >> 12;
    x ^= x << 9;
    return x;
}

float random(vec3 f) {
  uint mantissaMask = 0x007FFFFFu;
  uint one = 0x3F800000u;
  uvec3 u = floatBitsToUint(f);
  uint h = hash3(u.x, u.y, u.z);
  return uintBitsToFloat((h & mantissaMask) | one) - 1.0;
}

float RandomNoise(){
  uint mantissaMask = 0x007FFFFFu;
  uint one = 0x3F800000u;
  uvec3 u = floatBitsToUint(randvec);
  uint h = hash3(u.x, u.y, u.z);
  float res = uintBitsToFloat((h & mantissaMask) | one) - 1.0;

  randvec.x = sin(randvec.y);
  randvec.y = sin(randvec.z);
  randvec.z = sin(res);
  
  return (sin(res));
}

float RandomFloat_0to1(){
    return RandomNoise();
}

vec2 Random2D(){
    return normalize(vec2(RandomNoise(), RandomNoise()));
}

vec3 Random3D(){
    return normalize(vec3(RandomNoise(), RandomNoise(), RandomNoise()));
}

vec3 randomSpherePoint(vec3 rand) {
    float ang1 = (rand.x + 1.0) * PI; // [-1..1) -> [0..2*PI)
    float u = rand.y; // [-1..1), cos and acos(2v-1) cancel each other out, so we arrive at [-1..1)
    float u2 = u * u;
    float sqrt1MinusU2 = sqrt(1.0 - u2);
    float x = sqrt1MinusU2 * cos(ang1);
    float y = sqrt1MinusU2 * sin(ang1);
    float z = u;
    return vec3(x, y, z);
}

vec3 NormalOrientedHemispherePoint(vec3 rand, vec3 n){
    vec3 v = randomSpherePoint(rand);
    return v * sign(dot(v, n));
}

//pos is in voxels
int GetBlock(in ivec3 block_pos){
    int block;

    // if (block_pos.x < 0 || block_pos.x >=3) return 0;
    // if (block_pos.y < 0 || block_pos.y >=3) return 0;
    // if (block_pos.z < 0 || block_pos.z >=3) return 0;

    block = int((imageLoad(blocks, ivec3(
        block_pos.x,
        block_pos.y,
        block_pos.z
        )).r));

    return block;
}
int GetVoxel(in ivec3 pos){
    int voxel;

    if (pos.x < 0 || pos.x >= 16*WIDTH_B ) return 0;
    if (pos.y < 0 || pos.y >= 16*LENGTH_B) return 0;
    if (pos.z < 0 || pos.z >= 16*HEIGHT_B) return 0;

    ivec3 block_pos = pos / 16;
    ivec3 relative_voxel_pos = pos % 16;

    int block = GetBlock(block_pos);
    ivec3 voxel_pos = relative_voxel_pos + ivec3(0,0,16)*block;
    // ivec3 voxel_pos = pos + ivec3(0,0,16)*1;
    
    voxel = int((imageLoad(blockPalette, ivec3(
        voxel_pos.x,
        voxel_pos.y,
        voxel_pos.z
    )).r));

    return voxel;
}
void SetVoxel(in ivec3 pos, in int voxel){


    ivec3 block_pos = pos / 16;
    ivec3 relative_voxel_pos = pos % 16;

    int block = GetBlock(block_pos);
    ivec3 voxel_pos = relative_voxel_pos + ivec3(0,0,16)*block;
    // ivec3 voxel_pos = pos + ivec3(0,0,16)*1;
    
    imageStore(blockPalette, ivec3(
        voxel_pos.x,
        voxel_pos.y,
        voxel_pos.z
        ),
        ivec4(voxel));
}

Material GetMat(in int voxel){
    Material mat;

    // mat.emmitance = 0.1;
    // mat.smoothness = 0.5;


    mat.color.r      = imageLoad(voxelPalette, ivec2(0, voxel)).r;
    mat.color.g      = imageLoad(voxelPalette, ivec2(1, voxel)).r;
    mat.color.b      = imageLoad(voxelPalette, ivec2(2, voxel)).r;
    mat.transparancy = 1.0 - imageLoad(voxelPalette, ivec2(3, voxel)).r;
    mat.emmitance    =       imageLoad(voxelPalette, ivec2(4, voxel)).r;
    mat.smoothness   =       imageLoad(voxelPalette, ivec2(5, voxel)).r;
    // mat.emmitance    = 0.1;    
    // mat.color = mat.color/2 + 0.5;
    // mat.emmitance=mat.color;
    // mat.color=vec3(0);
    // mat.color = vec3(.6,.8,.3);
    // mat.transparancy = 0.0;
    // mat.color = vec3(8,9,10)/14;
    // mat.smoothness   = .2;
    mat.emmitance    = 0.2;
    mat.transparancy = 0;
    mat.smoothness   = 0.05;
    // mat.transparancy = 0;
    // if (voxel == 156) {
    //     // mat.color = vec3(255, 0, 0) / 256.0;
    //     mat.emmitance = 0.05;
    //     mat.smoothness = 0.0;
    //     mat.transparancy = 0.8;
    // }
    // if (voxel == 165) {
    //     mat.color = vec3(12, 255, 34) / 256.0;
    //     mat.emmitance = 0.9;
    //     mat.smoothness = 0.5;
    // } else
    // if (voxel == 156) {
    //     mat.color = vec3(50, 50, 255) / 256.0;
    //     mat.emmitance = 0.5;
    //     mat.smoothness = 0.2;
    // }
    // // mat.smoothness = 1.0;
return mat;
}

// bool InsideScene(in vec3 rayOrigin){
//     vec3 corner_1 = vec3(0, 0, 0);
//     vec3 corner_2 = vec3(WIDTH, LENGTH, HEIGHT);

//     vec3 s = step(corner_1, rayOrigin) - step(corner_2, rayOrigin); //if we are inside of the box

//     if (s.x * s.y * s.z == 0.0) return false;

//     return true;
// }

// bool InsideScene_byBlockPos(in ivec3 block_pos){
//     ivec3 corner_1 = ivec3(0, 0, 0);
//     ivec3 corner_2 = ivec3(WIDTH, LENGTH, HEIGHT);

//     vec3 s = step(corner_1, block_pos) - step(corner_2, block_pos); //if we are inside of the box

//     if (s.x * s.y * s.z == 0) return false;

//     return true;
// }

bool initTvals(out vec3 tMax, out vec3 tDelta, out ivec3 blockPos, in vec3 rayOrigin, in vec3 rayDirection){
    vec3 effective_origin = rayOrigin;

    vec3 block_corner1 = floor(effective_origin); //not real center
    vec3 block_corner2 = block_corner1 + vec3(1.0); //now real center

    blockPos = ivec3(block_corner1); //round origin to block pos
    // blockPos = ivec3(block_corner1)*16; //round origin to block pos

    block_corner1 -= effective_origin; //now corners are relative vectors
    block_corner2 -= effective_origin;

    block_corner1 /= rayDirection; //now corners are in relative direction vectors
    block_corner2 /= rayDirection;

    tMax.x = max(block_corner1.x, block_corner2.x); //1 of theese will be negative so max is just to get positive
    tMax.y = max(block_corner1.y, block_corner2.y);
    tMax.z = max(block_corner1.z, block_corner2.z);

    tDelta = 1.0 / abs(rayDirection); //how many dir vectors needeed to move 1.0 across each axys

    return true;
}

// void CollideInsideBlock(in vec3 rayOrigin, in vec3 rayDirection, out float fraction, out vec3 normal, in ivec3 block_pos){
//     vec3 corner_1 = vec3(block_pos);
//     vec3 corner_2 = vec3(block_pos) + vec3(1.0);

//     vec3 planes_1 = (corner_1 - rayOrigin) / rayDirection;
//     vec3 planes_2 = (corner_2 - rayOrigin) / rayDirection;

//     vec3 fractionsForAxis;
//     fractionsForAxis.x = max(planes_1.x, planes_2.x);
//     fractionsForAxis.y = max(planes_1.y, planes_2.y);
//     fractionsForAxis.z = max(planes_1.z, planes_2.z);

//     ivec3 steps;
//     steps.x = (rayDirection.x < 0) ? -1 : +1;
//     steps.y = (rayDirection.y < 0) ? -1 : +1;
//     steps.z = (rayDirection.z < 0) ? -1 : +1;

//     if (fractionsForAxis.x < fractionsForAxis.y) {
//         if (fractionsForAxis.x < fractionsForAxis.z) {
//             fraction = fractionsForAxis.x;
//             normal = vec3(-1.0, 0, 0) * float(steps.x);
//         }
//         else { //z is the lowest
//             fraction = fractionsForAxis.z;
//             normal = vec3(0, 0, -1.0) * float(steps.z);
//         }
//     } else {
//         if (fractionsForAxis.y < fractionsForAxis.z) {
//             fraction = fractionsForAxis.y;
//             normal = vec3(0, -1.0, 0) * float(steps.y);
//         }
//         else { //z is the lowest
//             fraction = fractionsForAxis.z;
//             normal = vec3(0, 0, -1.0) * float(steps.z);
//         }
//     }
// }
// bool Cast_Ray(in vec3 origin, in vec3 dir, out float fraction, out vec3 normal, out Material mat) {
//     bool hit = false;
//     ivec3 isteps;
//     isteps.x = int(dir.x > 0.0);
//     isteps.y = int(dir.y > 0.0);
//     isteps.z = int(dir.z > 0.0);
//     isteps = ivec3(2) * isteps - ivec3(1);
//     vec3 fsteps;
//     fsteps.x = float(dir.x > 0.0);
//     fsteps.y = float(dir.y > 0.0);
//     fsteps.z = float(dir.z > 0.0);
//     fsteps = 2.0 * fsteps - 1.0;

//     vec3 tMax = vec3(0);
//     vec3 tDelta = vec3(0);
//     vec3 fcurrentStepDiretion = vec3(0);
//     ivec3 icurrentStepDiretion = ivec3(0);
//     ivec3 currentVoxelPos = ivec3(0);
//     int currentVoxel = 0;
//     fraction = 0;

//     if (!initTvals(origin, dir, tMax, tDelta, currentVoxelPos)) return false; //does not intersect with scene

//     currentVoxel = GetVoxel(currentVoxelPos);
//     int iterations = 0;
//     while (true) {
//         icurrentStepDiretion.x = int(tMax.x < tMax.y && tMax.x < tMax.z);
//         icurrentStepDiretion.y = int(tMax.x > tMax.y && tMax.y < tMax.z);
//         icurrentStepDiretion.z = int(tMax.z < tMax.x && tMax.z < tMax.y);

//         fcurrentStepDiretion.x = float(int((tMax.x <= tMax.y) && (tMax.x <= tMax.z)));
//         fcurrentStepDiretion.y = float(int((tMax.x >= tMax.y) && (tMax.y <= tMax.z)));
//         fcurrentStepDiretion.z = float(int((tMax.z <= tMax.x) && (tMax.z <= tMax.y)));

//         currentVoxelPos += isteps * icurrentStepDiretion;
//         fraction += dot(tDelta, fcurrentStepDiretion);
//         tMax += (tDelta * fcurrentStepDiretion);

//         currentVoxel = GetVoxel(currentVoxelPos);
//         // currentBlock = Get_Block(currentVoxelPos);

//         if (currentVoxel != 0) {
//             hit = true;
//             break;
//         }

//         if (iterations++ > 128) {
//             hit = false;
//             break;
//         }
//     }
//     ;

//     normal = -(fsteps * fcurrentStepDiretion);
//     mat = GetMat(currentVoxel);

//     return hit;
// }
bool CastRay(in vec3 rayOrigin, in vec3 rayDirection, out float fraction, out vec3 normal, out Material material, float ignored_voxel){
    bool block_hit = false;

    ivec3 steps;
    steps.x = int(rayDirection.x > 0.0);
    steps.y = int(rayDirection.y > 0.0);
    steps.z = int(rayDirection.z > 0.0);
    steps = 2 * steps - 1;

    vec3 fsteps = vec3(steps);

    vec3 tMax = vec3(0);
    vec3 tDelta = vec3(0);
    ivec3 voxel_pos = ivec3(0);
    float block_fraction = 0.0;

    lowp int What_Is_Step = 0;
    ivec3 istep_Diretion = ivec3(0);
    vec3 fcurrentStepDiretion = vec3(0);

    if (!initTvals(tMax, tDelta, voxel_pos, rayOrigin, rayDirection)) return false; //does not intersect with scene

    int current_voxel = GetVoxel(voxel_pos);
    int iterations = 0;
    while (true) {
        // fstep_Diretion =  vec3(0);
        fcurrentStepDiretion.x = float(int((tMax.x <= tMax.y) && (tMax.x <= tMax.z)));
        fcurrentStepDiretion.y = float(int((tMax.x >= tMax.y) && (tMax.y <= tMax.z)));
        fcurrentStepDiretion.z = float(int((tMax.z <= tMax.x) && (tMax.z <= tMax.y)));

        voxel_pos += steps * ivec3(fcurrentStepDiretion);
        tMax += tDelta * fcurrentStepDiretion;

        current_voxel = GetVoxel(voxel_pos);

        if ((current_voxel != 0) 
        //  && (current_voxel != ignored_voxel)
        ){
            block_hit = true;
            break;
        }
        if (iterations++ >= 1024) {
            block_hit = false;
            break;
        }
        if (any(lessThanEqual(voxel_pos,ivec3(0))) || any(greaterThanEqual(voxel_pos,ivec3(16*5)))) {
            block_hit = false;
            break;
        }
    }

    normal = -(fsteps * fcurrentStepDiretion);
    vec3 tFinal = tMax - tDelta;
    // block_fraction += dot(tFinal, fcurrentStepDiretion);
    block_fraction = dot(tFinal, fcurrentStepDiretion);

    material = GetMat(current_voxel);
    fraction = block_fraction;

    return (block_hit);
}

float FresnelSchlick(in vec3 direction, in vec3 normal){
    float nIn = nIN;
    float nOut = nOUT;
    float R0 = ((nOut - nIn) * (nOut - nIn)) / ((nOut + nIn) * (nOut + nIn));
    float fresnel = R0 + (1.0 - R0) * pow((1.0 - abs(dot(direction, normal))), 5.0);
    return fresnel;
}
vec3 IdealRefract(vec3 direction, vec3 normal, float nIn, float nOut){
    // проверим, находимся ли мы внутри объекта
    // если да - учтем это при расчете сред и направления луча
    bool fromOutside = dot(normal, direction) < 0.0;
    float ratio = fromOutside ? nOut / nIn : nIn / nOut;

    vec3 refraction, reflection;
    refraction = fromOutside ? refract(direction, normal, ratio) : -refract(-direction, normal, ratio);
    reflection = reflect(direction, normal);

    // в случае полного внутренного отражения refract вернет нам 0.0
    return refraction == vec3(0.0) ? reflection : refraction;
}
bool IsRefracted(in vec3 rayDirection, in vec3 normal, in float transparancy){
    float fresnel = FresnelSchlick(rayDirection, normal);
    float rand = RandomFloat_0to1();
    return (transparancy > rand) && (fresnel < rand); // && transparancy == 0.0;
}

void ProcessHit(inout vec3 origin, inout vec3 direction, 
                in float fraction, in vec3 normal, in Material material, 
                inout vec3 accumulated_light, inout vec3 accumulated_reflection){

            vec3 new_origin = origin + (fraction * direction);

            vec3 hemisphereDistributedDirection = NormalOrientedHemispherePoint(Random3D(), normal);
            // vec3 randomVec = normalize(2.0 * Random3D() - 1.0);
            // vec3 tangent = cross(randomVec, normal);
            // vec3 bitangent = cross(normal, tangent);
            // mat3 transform = mat3(tangent, bitangent, normal);

            vec3 new_direction = hemisphereDistributedDirection;

            bool refracted = IsRefracted(direction, normal, material.transparancy);
            refracted = false;//TODO:
            if (refracted)
            {
                vec3 idealRefraction = IdealRefract(direction, normal, nIN, nOUT);
                new_direction = normalize(mix(-new_direction, idealRefraction, material.smoothness));
                // newRayDirection = normalize(mix(idealRefraction, -newRayDirection, material.smoothness));
                new_origin += normal * (dot(new_direction, normal) < 0.0 ? -0.001 : 0.001);
            }
            else
            {
                vec3 idealReflection = reflect(direction, normal);
                new_direction = normalize(mix(new_direction, idealReflection, material.smoothness));
                new_origin += normal * 0.001;
                accumulated_light += accumulated_reflection * material.emmitance * material.color;
                accumulated_reflection *= material.color;
                // accumulated_light += vec3(0.8) * 0.1 * accumulated_reflection;
            }

// ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
// imageStore(frame, pix, vec4(vec3(dot(normal, new_direction)<0),1));
            // direction = reflect(direction,normal);
            direction = new_direction;
            origin = new_origin;

}

vec3 TraceRay(in vec3 rayOrigin, in vec3 rayDirection, in vec3 accumulated_light, in vec3 accumulated_reflection, in float ignored_voxel){
    // vec3 accumulated_light = vec3(0.0);
    // vec3 accumulated_reflection = vec3(1.0);

    float fraction = 0;
    vec3 normal = vec3(0);
    Material material;

    for (int i = 0; i < MAX_DEPTH; i++)
    {
        bool hit = CastRay(rayOrigin, rayDirection, fraction, normal, material, ignored_voxel);
        ignored_voxel = 999.0;
        if (hit)
        {
            // return vec3(material.color);
            ProcessHit(rayOrigin, rayDirection, 
                fraction, normal, material, 
                accumulated_light, accumulated_reflection);
            // if (length(rayDirection) <= 15) return vec3(1);
            // vec3 newRayOrigin = rayOrigin + (fraction * rayDirection);

            // vec3 hemisphereDistributedDirection = NormalOrientedHemispherePoint(Random3D(), normal);
            // // vec3 randomVec = normalize(2.0 * Random3D() - 1.0);

            // // vec3 tangent = cross(randomVec, normal);
            // // vec3 bitangent = cross(normal, tangent);
            // // mat3 transform = mat3(tangent, bitangent, normal);

            // // vec3 newRayDirection = transform * hemisphereDistributedDirection;
            // vec3 newRayDirection = hemisphereDistributedDirection;

            // bool refracted = IsRefracted(rayDirection, normal, material.transparancy);
            // refracted=false;
            // if (refracted)
            // {
            //     vec3 idealRefraction = IdealRefract(rayDirection, normal, nIN, nOUT);
            //     newRayDirection = normalize(mix(-newRayDirection, idealRefraction, material.smoothness));
            //     // newRayDirection = normalize(mix(idealRefraction, -newRayDirection, material.smoothness));
            //     newRayOrigin += normal * (dot(newRayDirection, normal) < 0.0 ? -0.001 : 0.001);
            // }
            // else
            // {
            //     vec3 idealReflection = reflect(rayDirection, normal);
            //     newRayDirection = normalize(mix(newRayDirection, idealReflection, material.smoothness));
            //     newRayOrigin += normal * 0.001;
            //     accumulated_light += accumulated_reflection * material.emmitance * material.color;
            //     accumulated_reflection *= material.color;
            //     // accumulated_light += vec3(0.8) * 0.2 * accumulated_reflection;
            // }

            // rayDirection = newRayDirection;
            // rayOrigin = newRayOrigin;
        }
        else {
            break;
        }
    }

    float global_light_participance = -dot(rayDirection, globalLightDir);
    if (global_light_participance > 0.0) {
        accumulated_light += (vec3(.9,.9,.6)/2) * accumulated_reflection * global_light_participance;
    }

    return accumulated_light;   
}


vec3 rotateAxis(vec3 p, vec3 axis, float angle) {
    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);
}

//TODO: balance
layout(local_size_x = 8, local_size_y = 8) in;

// float inv(float f){
//     return  ()
// }

void main(void){
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(frame);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }

    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    randvec = vec3(pos,pos.x*pos.y) / (0.1+sin(PushConstants.timeSeed));
    randvec = Random3D();
    // randvec = (((randvec)));

    float       fmat =  imageLoad(posMat, pix).w;
    vec3 origin =  imageLoad(posMat, pix).xyz;
    vec3 direction = cameraRayDir;
    vec3 normal = normalize(imageLoad(norms , pix).xyz);
    // origin -= direction*0.1;

    vec3 accumulated_light      = vec3(0); 
    vec3 accumulated_reflection = vec3(1);

    Material material = GetMat(int(fmat));
    // float fvoxel = GetVoxel(ivec3(origin));
    // fvoxel = 999;
    // direction = reflect(direction, normal);
    


    // float fvoxel = GetVoxel(ivec3(origin+direction*4.9));
    SetVoxel(ivec3(origin), 0);
    SetVoxel(ivec3(origin+normal*0.2), 0);
    SetVoxel(ivec3(origin+normal*0.35), 0);
    SetVoxel(ivec3(origin+normal*0.5), 0);
    SetVoxel(ivec3(origin+normal*0.7), 0);
    SetVoxel(ivec3(origin+normal*1.0), 0);
    SetVoxel(ivec3(origin+normal*1.2), 0);
    SetVoxel(ivec3(origin+normal*1.4), 0);
    float fvoxel = GetVoxel(ivec3(origin));
    // GetVoxel
    fvoxel=99999999.0;

    origin += normal*0.001;
    // ProcessHit(origin, direction,
    //     0.0, normal, material,
    //     accumulated_light, accumulated_reflection);
    // imageStore(frame, pix, vec4((GetMat(int(fvoxel)).color),1));
    // imageStore(frame, pix, vec4((abs(direction)),1));
    // if(length(direction)<0.9) 
    // imageStore(frame, pix, vec4(0.5+(direction)/2,1));
    // imageStore(frame, pix, vec4(vec3(dot(normal, direction)<0),1));


    // imageStore(frame, pix, vec4(vec3(1)*(dot(abs(direction), abs(vec3(1)))),1));


    // vec3 idealReflection = reflect(direction, normal);
    // direction = idealReflection;
    // direction = normalize(mix(direction, idealReflection, material.smoothness));
    // origin += normal * 0.001;
    // accumulated_light += accumulated_reflection * material.emmitance * material.color;
    // accumulated_reflection *= material.color;
    // accumulated_light += vec3(0.8) * 0.2 * accumulated_reflection;

    origin = 20*cameraRayDir+ vec3(0,0,20) + (pos-0.5).x * (horizline*200.0) + (pos-0.5).y * (vertiline*100.0) ;
    // imageStore(frame, pix, vec4(((direction)/2+0.5),1));

    vec3 color = vec3(0);
    for (int samplei = 0; samplei < NUM_SAMPLES; samplei++)    {
        // vec2 posShift = 2.0 * (Random2D() - vec2(0.5)) / vec2(size);
        color += TraceRay(origin, direction, accumulated_light, accumulated_reflection, fvoxel) / NUM_SAMPLES;
    }

    vec2 old_clip = imageLoad(diffs, pix).xy;
    vec2 old_uv   = old_clip/2 + 0.5;
    // vec2 old_uv   = old_clip;
    // ivec2 pix_shift = ivec2(size * clip_shift.xy * 10);
    vec3 old_color = texture(frame_sampler, old_uv).xyz;
    // color = mix(color, old_color, 0.95);
    // imageStore(frame, pix, vec4(400*abs(clip_shift),1));
    imageStore(frame, pix, vec4(color, 1));
    // imageStore(frame, pix, vec4(abs(old_clip), 1));
}
