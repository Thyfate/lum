#version 450

precision highp float;
precision highp int;

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

layout(set = 0, binding = 0, rgba16) uniform image2D  new_frame; //out
layout(set = 0, binding = 1, rgba16) uniform image2D  old_frame; //in
layout(set = 0, binding = 2, rgba8_snorm) uniform image2D  new_matNorm;
layout(set = 0, binding = 3, rgba8_snorm) uniform image2D  old_matNorm;
layout(set = 0, binding = 4, rgba16) uniform image2D  oldShift;
layout(set = 0, binding = 5, r16) uniform image2D mix_ratio_image;

vec3 load_new_norm(ivec2 pixel){
    vec3 norm = (imageLoad(new_matNorm, pixel).gba);
    return norm;
}
vec3 load_old_norm(ivec2 pixel){
    vec3 norm = (imageLoad(old_matNorm, pixel).gba);
    return norm;
}
int load_new_mat(ivec2 pixel){
    int mat = int(round(imageLoad(new_matNorm, pixel).x*127.0))+127;
    return mat;
}
int load_old_mat(ivec2 pixel){
    int mat = int(round(imageLoad(old_matNorm, pixel).x*127.0))+127;
    return mat;
}

const float COLOR_ENCODE_VALUE = 5.0;
vec3 decode_color(vec3 encoded_color){
    return clamp(encoded_color,0,1)*vec3(COLOR_ENCODE_VALUE);
}
vec3 encode_color(vec3 color){
    return clamp(color/vec3(COLOR_ENCODE_VALUE), 0,1);
}

layout(local_size_x=8, local_size_y=8) in;
void main(){
    const ivec2 size = imageSize(new_frame); 
    const ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
        
    if(any(greaterThanEqual(pix, size))) return;
        
    const  vec2 pos = vec2(pix) + 0.5;
    vec3 new_color = decode_color(imageLoad(new_frame, pix).xyz);

    vec2 uv_shift = imageLoad(oldShift, pix).xy;
    vec2 old_pos = pos + uv_shift*vec2(size);

    // vec3 old_color = imageLoad(old_frame, ivec2(old_pos)).xyz;
    // vec3 final_color = mix(new_color, old_color, 0.99);

vec2 half_texel_size = vec2(0.5);
vec2 sampled_quad_center =  (round(vec2(old_pos)));

vec2 p00_center = sampled_quad_center + vec2(-half_texel_size.x, -half_texel_size.y);
vec2 p10_center = sampled_quad_center + vec2(+half_texel_size.x, -half_texel_size.y);
vec2 p01_center = sampled_quad_center + vec2(-half_texel_size.x, +half_texel_size.y);
vec2 p11_center = sampled_quad_center + vec2(+half_texel_size.x, +half_texel_size.y); 

ivec2 p00_pix = clamp(ivec2(p00_center),ivec2(0), size-1);
ivec2 p10_pix = clamp(ivec2(p10_center),ivec2(0), size-1);
ivec2 p01_pix = clamp(ivec2(p01_center),ivec2(0), size-1);
ivec2 p11_pix = clamp(ivec2(p11_center),ivec2(0), size-1); 

vec3 p00 = decode_color(imageLoad(old_frame, p00_pix).rgb);
vec3 p10 = decode_color(imageLoad(old_frame, p10_pix).rgb);
vec3 p01 = decode_color(imageLoad(old_frame, p01_pix).rgb);
vec3 p11 = decode_color(imageLoad(old_frame, p11_pix).rgb);

int mat = load_new_mat(pix);
int p00_mat = load_old_mat(p00_pix);
int p10_mat = load_old_mat(p10_pix);
int p01_mat = load_old_mat(p01_pix);
int p11_mat = load_old_mat(p11_pix);

float x_mix = old_pos.x - p00_center.x;
float y_mix = old_pos.y - p00_center.y;

// float p00_weight = distance(old_uv, p00_center);
// float p10_weight = distance(old_uv, p10_center);
// float p01_weight = distance(old_uv, p01_center);
// float p11_weight = distance(old_uv, p11_center);

float p00_weight = +(1.0-x_mix)*(1.0-y_mix) * (float((p00_mat==mat))) * float(dot(load_old_norm(p00_pix), load_new_norm(pix)) > 0.5);// || ((distance(get_origin_from_depth(depth, pos), old_get_origin_from_depth(load_old_depth(old_uv), old_uv)) < .5) && (dot(texture(old_new_matNorm, p11_center).yzw, load_new_norm(pix)) > 10.5)));// * float(dot(texture(old_new_matNorm, p11_center).yzw, load_new_norm(pix)) > -.1);
float p10_weight = +(    x_mix)*(1.0-y_mix) * (float((p10_mat==mat))) * float(dot(load_old_norm(p10_pix), load_new_norm(pix)) > 0.5);// || ((distance(get_origin_from_depth(depth, pos), old_get_origin_from_depth(load_old_depth(old_uv), old_uv)) < .5) && (dot(texture(old_new_matNorm, p10_center).yzw, load_new_norm(pix)) > 10.5)));// * float(dot(texture(old_new_matNorm, p10_center).yzw, load_new_norm(pix)) > -.1);
float p01_weight = +(1.0-x_mix)*(    y_mix) * (float((p01_mat==mat))) * float(dot(load_old_norm(p01_pix), load_new_norm(pix)) > 0.5);// || ((distance(get_origin_from_depth(depth, pos), old_get_origin_from_depth(load_old_depth(old_uv), old_uv)) < .5) && (dot(texture(old_new_matNorm, p01_center).yzw, load_new_norm(pix)) > 10.5)));// * float(dot(texture(old_new_matNorm, p01_center).yzw, load_new_norm(pix)) > -.1);
float p11_weight = +(    x_mix)*(    y_mix) * (float((p11_mat==mat))) * float(dot(load_old_norm(p11_pix), load_new_norm(pix)) > 0.5);// || ((distance(get_origin_from_depth(depth, pos), old_get_origin_from_depth(load_old_depth(old_uv), old_uv)) < .5) && (dot(texture(old_new_matNorm, p00_center).yzw, load_new_norm(pix)) > 10.5)));// * float(dot(texture(old_new_matNorm, p00_center).yzw, load_new_norm(pix)) > -.1);
// p00_weight += 1e-8;
// p11_weight += 1e-8;

// p11_weight *= p11_weight;
// p10_weight *= p10_weight;
// p01_weight *= p01_weight;
// p00_weight *= p00_weight;

float weight = (
    p00_weight+
    p10_weight+
    p01_weight+
    p11_weight
);
vec3 old_color = ((
    p00*p00_weight+
    p10*p10_weight+
    p01*p01_weight+
    p11*p11_weight
))/(weight);

    // float color_diff = distance(old_color, new_color);

    float mix_ratio = clamp(imageLoad(mix_ratio_image, pix).r,0,1);
    float target_mix_ratio = 0.99;
    float mix_ratio_reactivness = 0.5;
    // float mix_ratio = 0.;

    vec3 final_color;
    if(weight == 0) {
        mix_ratio = 0;
        final_color = new_color;
    } else {
        mix_ratio = mix(mix_ratio, target_mix_ratio, mix_ratio_reactivness);
        // mix_ratio = 0.98;
        // final_color = new_color;
        final_color = mix(new_color, old_color, mix_ratio);
    }
    imageStore(mix_ratio_image, pix, vec4(mix_ratio));

    imageStore(new_frame, pix, vec4(encode_color(final_color),1));
}